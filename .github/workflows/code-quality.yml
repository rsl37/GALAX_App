name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read

jobs:
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Harden the runner (Audit all outbound calls)
      uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
      with:
        egress-policy: audit

    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      
    - name: Setup Node.js
      uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: './GALAX_App_files/package-lock.json'
        
    - name: Install dependencies
      working-directory: ./GALAX_App_files
      run: npm ci
      
    - name: Check if ESLint config exists
      working-directory: ./GALAX_App_files
      run: |
        if [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ] || [ -f "eslint.config.js" ]; then
          echo "ESLint config found, running linting"
          npm run lint || echo "No lint script found, installing basic ESLint setup"
        else
          echo "No ESLint config found, will setup basic linting"
          npm install --save-dev eslint @typescript-eslint/eslint-plugin @typescript-eslint/parser eslint-plugin-react eslint-plugin-react-hooks
          npx eslint --init --yes || true
        fi
        
    - name: Run ESLint (if available)
      working-directory: ./GALAX_App_files
      run: |
        if [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ] || [ -f "eslint.config.js" ]; then
          npx eslint . --ext .ts,.tsx,.js,.jsx --max-warnings 0 || echo "Linting found issues - this is informational for now"
        else
          echo "Skipping ESLint - no configuration found"
        fi
        
    - name: Check Prettier formatting (if available)
      working-directory: ./GALAX_App_files
      run: |
        if [ -f ".prettierrc" ] || [ -f ".prettierrc.json" ] || [ -f "prettier.config.js" ]; then
          npx prettier --check . || echo "Prettier formatting issues found - this is informational for now"
        else
          echo "Skipping Prettier - no configuration found"
        fi

  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Harden the runner (Audit all outbound calls)
      uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
      with:
        egress-policy: audit

    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      
    - name: Setup Node.js
      uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: './GALAX_App_files/package-lock.json'
        
    - name: Install dependencies
      working-directory: ./GALAX_App_files
      run: npm ci
      
    - name: Setup test coverage tools
      working-directory: ./GALAX_App_files
      run: |
        npm install --save-dev jest @types/jest ts-jest @testing-library/react @testing-library/jest-dom vitest @vitest/ui c8
        
    - name: Run tests with coverage
      working-directory: ./GALAX_App_files
      run: |
        if [ -f "jest.config.js" ] || [ -f "jest.config.json" ]; then
          npx jest --coverage || echo "Tests not yet implemented - this is expected"
        elif [ -f "vitest.config.js" ] || [ -f "vite.config.js" ]; then
          npx vitest run --coverage || echo "Tests not yet implemented - this is expected"
        else
          echo "No test framework configuration found - this is expected for initial setup"
        fi
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24 # v5.4.3
      if: success()
      with:
        directory: ./GALAX_App_files/coverage
        fail_ci_if_error: false # Don't fail CI if coverage upload fails