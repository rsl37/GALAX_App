name: Deployment Readiness

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  staging-deployment-test:
    name: Staging Deployment Verification
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: './GALAX_App_files/package-lock.json'
        
    - name: Install dependencies
      working-directory: ./GALAX_App_files
      run: npm ci
      
    - name: Build for production
      working-directory: ./GALAX_App_files
      run: |
        NODE_ENV=production npm run build
        
    - name: Verify build artifacts
      working-directory: ./GALAX_App_files
      run: |
        echo "Verifying build artifacts..."
        
        # Check that dist directory exists and has content
        if [ ! -d "dist" ]; then
          echo "❌ Build failed: dist directory not found"
          exit 1
        fi
        
        # Check for main assets
        if [ ! -d "dist/public" ]; then
          echo "❌ Build failed: public assets not found"
          exit 1
        fi
        
        # Check for HTML entry point
        if [ ! -f "dist/public/index.html" ]; then
          echo "❌ Build failed: index.html not found"
          exit 1
        fi
        
        # Check for JavaScript bundles
        if ! find dist/public/assets -name "*.js" | grep -q .; then
          echo "❌ Build failed: JavaScript bundles not found"
          exit 1
        fi
        
        echo "✅ Build artifacts verified"
        
    - name: Test production environment simulation
      working-directory: ./GALAX_App_files
      run: |
        echo "Testing production environment simulation..."
        
        # Set production environment variables
        export NODE_ENV=production
        export PORT=3001
        
        # Start the application in production mode
        npm start &
        APP_PID=$!
        echo "Started app with PID: $APP_PID"
        
        # Wait for application to start
        echo "Waiting for application to start..."
        for i in {1..30}; do
          if curl -f http://localhost:3001 > /dev/null 2>&1; then
            echo "✅ Application started successfully"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "❌ Application failed to start within 30 seconds"
            kill $APP_PID 2>/dev/null || true
            exit 1
          fi
          sleep 1
        done
        
        # Test basic endpoints
        echo "Testing basic endpoints..."
        
        # Test health check (if exists)
        if curl -f http://localhost:3001/health > /dev/null 2>&1; then
          echo "✅ Health endpoint responding"
        else
          echo "ℹ️  Health endpoint not available (expected for current setup)"
        fi
        
        # Test main application
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3001)
        if [ "$HTTP_STATUS" = "200" ]; then
          echo "✅ Main application responding with 200"
        else
          echo "⚠️  Main application responding with status: $HTTP_STATUS"
        fi
        
        # Clean up
        kill $APP_PID 2>/dev/null || true
        
    - name: Docker deployment simulation
      working-directory: ./GALAX_App_files
      run: |
        echo "Testing Docker deployment readiness..."
        
        # Create Dockerfile for testing
        cat > Dockerfile.test << 'EOF'
        FROM node:20-alpine

        WORKDIR /app

        # Copy package files
        COPY package*.json ./
        RUN npm ci --only=production

        # Copy built application
        COPY dist/ ./dist/
        COPY data/ ./data/

        EXPOSE 3000

        CMD ["node", "dist/server/index.js"]
        EOF
        
        # Test Docker build (if Docker is available)
        if command -v docker > /dev/null 2>&1; then
          echo "Docker available - testing container build"
          docker build -f Dockerfile.test -t galax-test . || echo "Docker build test completed with warnings"
        else
          echo "Docker not available - skipping container build test"
        fi
        
        rm -f Dockerfile.test

  deployment-health-checks:
    name: Deployment Health Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: './GALAX_App_files/package-lock.json'
        
    - name: Install dependencies
      working-directory: ./GALAX_App_files
      run: npm ci
      
    - name: Build application
      working-directory: ./GALAX_App_files
      run: npm run build
      
    - name: Test startup time
      working-directory: ./GALAX_App_files
      run: |
        echo "Testing application startup time..."
        
        START_TIME=$(date +%s)
        npm start &
        APP_PID=$!
        
        # Wait for app to be ready
        for i in {1..60}; do
          if curl -f http://localhost:3000 > /dev/null 2>&1; then
            END_TIME=$(date +%s)
            STARTUP_TIME=$((END_TIME - START_TIME))
            echo "✅ Application started in ${STARTUP_TIME} seconds"
            break
          fi
          sleep 1
        done
        
        if [ $i -eq 60 ]; then
          echo "❌ Application failed to start within 60 seconds"
          kill $APP_PID 2>/dev/null || true
          exit 1
        fi
        
        # Test memory usage
        echo "Checking memory usage..."
        MEMORY_KB=$(ps -o rss= -p $APP_PID | tail -1 | xargs)
        MEMORY_MB=$((MEMORY_KB / 1024))
        echo "Application memory usage: ${MEMORY_MB}MB"
        
        if [ $MEMORY_MB -gt 512 ]; then
          echo "⚠️  High memory usage detected: ${MEMORY_MB}MB"
        else
          echo "✅ Memory usage within acceptable range"
        fi
        
        # Clean up
        kill $APP_PID 2>/dev/null || true
        
    - name: Test graceful shutdown
      working-directory: ./GALAX_App_files
      run: |
        echo "Testing graceful shutdown..."
        
        npm start &
        APP_PID=$!
        
        # Wait for startup
        sleep 5
        
        # Send SIGTERM for graceful shutdown
        kill -TERM $APP_PID
        
        # Wait for graceful shutdown
        for i in {1..10}; do
          if ! kill -0 $APP_PID 2>/dev/null; then
            echo "✅ Application shut down gracefully in ${i} seconds"
            break
          fi
          sleep 1
        done
        
        if kill -0 $APP_PID 2>/dev/null; then
          echo "⚠️  Application did not shut down gracefully, forcing termination"
          kill -9 $APP_PID 2>/dev/null || true
        fi

  environment-compatibility:
    name: Environment Compatibility Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: './GALAX_App_files/package-lock.json'
        
    - name: Test Node.js compatibility
      working-directory: ./GALAX_App_files
      run: |
        echo "Testing Node.js ${{ matrix.node-version }} compatibility..."
        
        # Install dependencies
        npm ci
        
        # Test build
        npm run build
        
        # Basic runtime test
        timeout 30s npm start &
        APP_PID=$!
        
        sleep 10
        
        if curl -f http://localhost:3000 > /dev/null 2>&1; then
          echo "✅ Compatible with Node.js ${{ matrix.node-version }}"
        else
          echo "❌ Issues with Node.js ${{ matrix.node-version }}"
        fi
        
        kill $APP_PID 2>/dev/null || true