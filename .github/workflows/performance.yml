name: Performance Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read

jobs:
  performance-benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    
    steps:
    - name: Harden the runner (Audit all outbound calls)
      uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
      with:
        egress-policy: audit

    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      
    - name: Setup Node.js
      uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: './GALAX_App_files/package-lock.json'
        
    - name: Install dependencies
      working-directory: ./GALAX_App_files
      run: npm ci
      
    - name: Build application
      working-directory: ./GALAX_App_files
      run: npm run build
      
    - name: Install performance testing tools
      working-directory: ./GALAX_App_files
      run: |
        npm install --save-dev lighthouse lighthouse-ci @lhci/cli webpack-bundle-analyzer
        
    - name: Analyze bundle size
      working-directory: ./GALAX_App_files
      run: |
        # Analyze bundle size
        echo "Analyzing bundle size..."
        ls -la dist/public/assets/ || echo "Build assets not found"
        
        # Check for large bundles (>500KB warning from Vite)
        find dist/public/assets/ -name "*.js" -size +500k || echo "No large bundles found"
        
        # Generate bundle size report
        cat > bundle-size-report.md << 'EOF'
        # Bundle Size Report
        
        ## JavaScript Assets
        EOF
        
        if [ -d "dist/public/assets" ]; then
          echo "| File | Size |" >> bundle-size-report.md
          echo "|------|------|" >> bundle-size-report.md
          find dist/public/assets/ -name "*.js" -exec ls -lh {} \; | awk '{print "| " $9 " | " $5 " |"}' >> bundle-size-report.md
        fi
        
        cat bundle-size-report.md
        
    - name: Start application for performance testing
      working-directory: ./GALAX_App_files
      run: |
        # Start the application
        npm start &
        APP_PID=$!
        echo "APP_PID=$APP_PID" >> $GITHUB_ENV
        
        # Wait for application to be ready
        timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done' || echo "App may not be ready"
        
    - name: Run Lighthouse CI
      working-directory: ./GALAX_App_files
      run: |
        # Create Lighthouse CI config if it doesn't exist
        if [ ! -f ".lighthouserc.json" ]; then
          cat > .lighthouserc.json << 'EOF'
        {
          "ci": {
            "collect": {
              "url": ["http://localhost:3000"],
              "numberOfRuns": 3
            },
            "assert": {
              "assertions": {
                "categories:performance": ["warn", {"minScore": 0.7}],
                "categories:accessibility": ["error", {"minScore": 0.9}],
                "categories:best-practices": ["warn", {"minScore": 0.8}],
                "categories:seo": ["warn", {"minScore": 0.8}]
              }
            },
            "upload": {
              "target": "temporary-public-storage"
            }
          }
        }
        EOF
        fi
        
        # Run Lighthouse CI
        npx lhci autorun || echo "Lighthouse CI completed with warnings"
        
    - name: Performance budget check
      working-directory: ./GALAX_App_files
      run: |
        echo "Checking performance budgets..."
        
        # Check JavaScript bundle size (should be under 1MB)
        JS_SIZE=$(find dist/public/assets/ -name "*.js" -exec stat -f%z {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
        echo "Total JavaScript size: $JS_SIZE bytes"
        
        if [ "$JS_SIZE" -gt 1048576 ]; then
          echo "⚠️  Warning: JavaScript bundle size exceeds 1MB"
        fi
        
        # Check CSS bundle size (should be under 100KB)
        CSS_SIZE=$(find dist/public/assets/ -name "*.css" -exec stat -f%z {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
        echo "Total CSS size: $CSS_SIZE bytes"
        
        if [ "$CSS_SIZE" -gt 102400 ]; then
          echo "⚠️  Warning: CSS bundle size exceeds 100KB"
        fi
        
    - name: Stop application
      if: always()
      run: |
        if [ ! -z "$APP_PID" ]; then
          kill $APP_PID || true
        fi
        
    - name: Upload performance reports
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      if: always()
      with:
        name: performance-reports
        path: |
          ./GALAX_App_files/.lighthouseci/
          ./GALAX_App_files/bundle-size-report.md
        retention-days: 5

  memory-performance:
    name: Memory Performance Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Harden the runner (Audit all outbound calls)
      uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
      with:
        egress-policy: audit

    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      
    - name: Setup Node.js
      uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: './GALAX_App_files/package-lock.json'
        
    - name: Install dependencies
      working-directory: ./GALAX_App_files
      run: npm ci
      
    - name: Install memory profiling tools
      working-directory: ./GALAX_App_files
      run: |
        npm install --save-dev clinic autocannon
        
    - name: Build application
      working-directory: ./GALAX_App_files
      run: npm run build
      
    - name: Memory usage test
      working-directory: ./GALAX_App_files
      run: |
        echo "Testing memory usage patterns..."
        
        # Start app with memory monitoring
        timeout 30s node --max-old-space-size=512 dist/server/index.js &
        SERVER_PID=$!
        
        # Wait a bit for startup
        sleep 5
        
        # Basic memory check
        if ps -p $SERVER_PID > /dev/null; then
          echo "Server started successfully with 512MB memory limit"
        else
          echo "⚠️  Server failed to start with memory constraints"
        fi
        
        # Clean up
        kill $SERVER_PID 2>/dev/null || true